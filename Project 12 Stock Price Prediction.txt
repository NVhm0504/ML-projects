✅ Project 12: Stock Price Prediction using LSTM (Deep Learning / Time Series)

We will use the Yahoo Finance API (yfinance) to fetch stock data and build an LSTM model for price prediction.
▶️ Step 1: Install Libraries

pip install yfinance pandas numpy matplotlib tensorflow

▶️ Step 2: Import Packages

import yfinance as yf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout
from sklearn.preprocessing import MinMaxScaler

▶️ Step 3: Fetch Stock Data

# Fetch data for Apple Inc. (AAPL)
df = yf.download('AAPL', start='2010-01-01', end='2023-12-31')
print(df.head())

▶️ Step 4: Data Preprocessing

scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(df['Close'].values.reshape(-1,1))

training_data_len = int(np.ceil(0.8 * len(scaled_data)))

train_data = scaled_data[0:training_data_len, :]

X_train, y_train = [], []

for i in range(60, len(train_data)):
    X_train.append(train_data[i-60:i, 0])
    y_train.append(train_data[i, 0])

X_train, y_train = np.array(X_train), np.array(y_train)
X_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))

▶️ Step 5: LSTM Model Building

model = Sequential([
    LSTM(50, return_sequences=True, input_shape=(X_train.shape[1], 1)),
    LSTM(50, return_sequences=False),
    Dense(25),
    Dense(1)
])

model.compile(optimizer='adam', loss='mean_squared_error')
model.fit(X_train, y_train, batch_size=64, epochs=10)

▶️ Step 6: Testing and Predictions

test_data = scaled_data[training_data_len - 60: , :]

X_test = []
y_test = scaled_data[training_data_len:, :]

for i in range(60, len(test_data)):
    X_test.append(test_data[i-60:i, 0])

X_test = np.array(X_test)
X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))

predictions = model.predict(X_test)
predictions = scaler.inverse_transform(predictions)

▶️ Step 7: Plot Predictions

train = df[:training_data_len]
valid = df[training_data_len:]
valid['Predictions'] = predictions

plt.figure(figsize=(14,5))
plt.title('Stock Price Prediction')
plt.plot(train['Close'], label='Train Data')
plt.plot(valid[['Close', 'Predictions']])
plt.legend(['Train', 'Actual', 'Predicted'])
plt.show()