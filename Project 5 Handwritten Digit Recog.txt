✅ Project 5: Handwritten Digit Recognition (Deep Learning on MNIST)
▶️ Libraries

import tensorflow as tf
from tensorflow.keras.datasets import mnist
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten
from tensorflow.keras.utils import to_categorical
import matplotlib.pyplot as plt

▶️ Load and Preprocess Data

(X_train, y_train), (X_test, y_test) = mnist.load_data()

# Normalize the pixel values
X_train = X_train / 255.0
X_test = X_test / 255.0

# One-hot encode the labels
y_train_cat = to_categorical(y_train, 10)
y_test_cat = to_categorical(y_test, 10)

▶️ Model Building

model = Sequential([
    Flatten(input_shape=(28,28)),
    Dense(128, activation='relu'),
    Dense(64, activation='relu'),
    Dense(10, activation='softmax')
])

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

▶️ Model Training

history = model.fit(X_train, y_train_cat, epochs=5, validation_data=(X_test, y_test_cat))

▶️ Model Evaluation

test_loss, test_acc = model.evaluate(X_test, y_test_cat)
print(f'Test accuracy: {test_acc:.4f}')

▶️ Visualizing Training Performance

plt.plot(history.history['accuracy'], label='train_accuracy')
plt.plot(history.history['val_accuracy'], label='val_accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()
plt.show()

✅ Bonus: Predict Sample Image

import numpy as np

index = 1000
sample = X_test[index].reshape(1,28,28)
prediction = model.predict(sample)
predicted_label = prediction.argmax()

plt.imshow(X_test[index], cmap='gray')
plt.title(f'Predicted Label: {predicted_label}')
plt.show()